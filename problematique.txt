1. Énonciation du problème et des exigences.

L'application, Tnider, est un réseau d'adoption d'animaux domestiques en ligne. Par le biais du site web, on peut consulter les différentes offres de vente, selon les préférences des usagers. L'application évolue donc dans un contexte ouvert et accessible à tous : c'est un application spécialisée disponible de tous. Pour le bien-être des usagers, l'application se devra d'être stable (aucune perte de données et toujours accessible), conviviale, sécuritaire (au niveau des données personnelles). Chaque animal présent dans la base de données aura donc une fiche avec ses informations personnalisés et chaque usager (acheteur ou vendeur) aura son compte pour naviguer et commercer avec les autres. 




2. Spécifications du système et des responsabilités des trois niveaux

Création d'un compte utilisateur
Lorsque l'usager arrive sur le site, il est prié de s'authentifier avant de pouvoir faire quoi que ce soit. S'il ne possède pas de compte, il sera prié d'en créer un. Il devra donc entrer des informations (username, nom, prénom, courriel et mot de passe) s'il désire en créer un. Du code JavaScript se chargera de récupérer le formulaire d'inscription. Ces informations seront passés au backend python qui se chargera de faire les ajouts dans les bonnes tables de la base de données.


Authentification d'un compte utilisateur
Si l'usager possède un compte, il peut entrer son email et son mot de passe pour se connecter. Si la combinaison des deux est bonne, l'usager sera amené sur sa page personnelle. Sinon, il devra réessayer. Du code JavaScript se chargera de récupérer le formulaire de connexion. Ces informations seront passés au backend python qui se chargera de faire les vérifications dans les bonnes tables de la base de données. Bien entendu les mots de passes stockés sont hachés donc on devra faire la vérification avec la version haché du mot de passe. Chaque connexion se verra attribuer un jeton de connexion (géré avec Flash-login) pour conserver la connexion durant la navigation entre les différentes pages.


"Swipe"
Une fois connecté, l'usager se voit offrir un animal disponible sur le site qu'il peut soit : ajouter à sa wishlist, consulter les informations détaillées de l'animal ou refuser. Après avoir fait son choix, le site en propose automatiquement un autre, peu importe le choix qu'il a fait. Le choix de l'usager (clic sur un des trois boutons) sera récupéré avec du code JavaScript et envoyé au backend Python. Si on ajoute l'animal à sa wishlist, du code Python se chargera de faire les bons appels à la base de données pour faire l'insertion de l'animal dans la wishlist de l'usager. Si on décide d'ignorer l'animal, on ajoute une entrée dans la table des animaux refusés avec le id de l'utilisateur et le id de l'animal. 


Modifier ses paramètres de swipe
L'usager acheteur peut modifier ses préférences de swipe. Ceci permet donc de définir certain critères qui pourront influencer le type d'animal qu'il verra lorsqu'il swipe. Il pourra donc modifier le type d'animal qu'il souhaite voir, la grosseur, le sexe, l'âge, la couleur du pelage (ou du plumage) et si l'animal est castré/dégriffé. Ces paramètres se modifient par le biais d'un interface et du code javascript se charge de récupérer ces préférences et de les envoyer dans des tables de préférences (une par type d'animal). 

Modifier ses paramètres personnels
L'utilisateur peut modifier ses paramètres personnels tels que son nom, son prénom, son courriel, son numéro de téléphone, son nom d'utilisateur, sa photo de profil ou son mot de passe. Du code JavaScript se charge donc de voir quel champs d'usager souhaite modifier et envoie le nom du champs et la nouvelle valeur au backend Python. Celui-ci se charge ensuite d'insérer la valeur dans la base de données contenant les utilisateurs. 


Consultation de la wishlist
L'usager peut à tout moment consulter les animaux qu'il aura marqué comme aimé lorsqu'il est dans l'interface de swipe. Sous forme de liste, il peut accéder aux différents animaux et accéder à leurs informations et voir sa photo. Le backend Python envoie l'information nécessaire pour permettre cet affichage et le html/css se charge d'en faire l'affichage correctement. De là, on peut également décider de supprimer l'animal de sa wishlist. Du code JavaScript se charge donc d'envoyer au backend quel animal a été supprimé et on recharge la page pour avoir le nouvel affichage. Un bouton se charge également d'afficher la page contenant le profil du propriétaire de l'animal. On peut donc facilement le contacter avec son email ou son numéro de téléphone. 


Ajouter un animal
Un usager vendeur peut, une fois connecté, mettre un animal de son choix en vente. Il devra donc fournir les différents informations (race, âge, poids, couleur, photo, etc) pour pouvoir le mettre en vente. Du code JavaScript se charge de récupérer les informations inscrites et de valider leur nature et on envoie ces informations au backend Python pour pouvoir faire l'insertion dans la base de données.

Voir ses animaux en vente
L'usager peut également voir les animaux qu'il a mis en vente. Il peut donc accéder aux mêmes informations que celles vu lors du swipe. Il peut également choisir de modifier les informations de l'animal mis en vente. Ceci suit exactement la même mécanique la modification des informations personnelles. De cet interface, il peut choisir d'ajouter un animal. Un formulaire se présente donc à lui et il peut ensuite entrer les différentes informations nécessaires. La même mécanique que celle de la création d'un profil utilisateur est utilisés. Il peut également choisir de retirer un animal qu'il a mis en vente. On envoie donc l'information au backend Python qui se charge de faire le retrait dans la table de vente de la base de données.

Naviguer sur le site
On peut, en étant connecté ou non, consulter la page 'About' qui décrit la mission sociale qu'essaie de remplir le site. On y retrouve de nombreuses informations importantes à connaître avant d'utiliser le site. On peut également accéder à la page 'Contact us' qui parle des créateurs du site et du contexte de création du site. 










